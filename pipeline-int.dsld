node('gf-slave') {
    def mvnHome = tool 'Maven_3_2_5'
    env.JAVA_HOME="${tool 'JDK_7u80'}"
    env.PATH="${env.JAVA_HOME}/bin:${mvnHome}/bin:${env.PATH}"
    env.MAVEN_OPTS="-Xmx2048m -XX:MaxPermSize=512m"
    
    stage 'Load Greenfield Functions'
    sh "git config --global http.sslVerify 'false'"
    def Greenfield = fileLoader.fromGit('GreenfieldPipeline/GreenfieldPipeline', 'https://gitbucket.tvlport.com/git/GREENFIELD/GreenfieldAdmin.git', 'master', null, '')

    stage 'List Production Regions'
		
    def Regions = Greenfield.getRegions()
    //println Regions.class
    for(myRegion in Regions){
        println "$myRegion.CLUSTER"
        println "http://$myRegion.CLUSTER"
        println "$myRegion.DOMAIN"
    }  

    stage 'Checkout'
    sh "git config --global http.sslVerify 'false'"
    Greenfield.git_checkout 'https://gitbucket.tvlport.com/git/GREENFIELD/GreenEcho.git' 


    stage 'Document Check'
    Greenfield.checkdocs 'https://doclibrary.travelport.com/dat/Data%20Center%20Operations/Cloud%20Implementations/Greenfield%20Echo/Green%20Echo%20Operational%20Support.docx'
    
    stage 'Maven Build'
    //wrap([$class: 'ConfigFileBuildWrapper', managedFiles: [[fileId: 'maven-settings', targetLocation: 'settings.xml', variable: 'GreenFieldSettings' ]]]) {
    wrap([$class: 'ConfigFileBuildWrapper', managedFiles: [[fileId: 'org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig1448996998298', targetLocation: 'settings.xml', variable: '']]]) {
        stage 'Compile UnitTest'
	    	// Complete a clean compile and unit test of my application
        	sh "mvn -U -s settings.xml clean compile test"

        stage 'Nexus Jar Publish'
			// Push a Jar file of my application to Nexus
       		sh "mvn -U -s settings.xml -Pjarmaker deploy -DskipTests"

        stage 'Nexus War Publish'
			// Push a War file of my application to Nexus
        	sh "mvn -U -s settings.xml -Pwebapp deploy -DskipTests"
        
        stage 'Sonar'
        // Greenfield.sonar()
        
        stage 'Fortify Scan'
        // Greenfield.fortify_scan()
    }
	
    stage 'Integration Deployment'
	Greenfield.stackato_login "https://api.stackato.tvlport.com","InfraSvcOrg", "NonProd"
	try {
		//Define the Application Name
		def appName = "greenecho-integration"
		
		// Allow Access to App Dynamics for Application
		Greenfield.appdynamics_setup("${appName}", "DV")
	    
		// Allow Access to Config Repo for Zookeeper
		Greenfield.config_repo_nonprod_setup()
		
		// Green Echo Application - Allow Access to Proxy Servers
		Greenfield.dvproxy_setup()
	
		// Green DP reporting service
		Greenfield.stackato "create-service user-provided testdb-${appName} --credentials hostname:shlgnrhds003.tvlport.net --credentials port:3306 --credentials password:'' --credentials pass:uaZVC8HQC5vtKfUEBemy --credentials user:perfreporting --credentials database:perfreporting"
	
		// Create an application User Provided Service to support someone else calling this service from inside Cloud Foundry
        Greenfield.stackato "create-service user-provided greenecho-svc-${appName} --credentials hostname:${appName}.stackato.tvlport.com --credentials host:${appName}.stackato.tvlport.com --credentials port:80 --credentials password:''"
		
        // Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided greenecho-svc-config-${appName} --credentials hostname:'' --credentials port:'' --credentials password:''"
			
		// Push my Application as an "integration" instance
        Greenfield.stackato "push -n --nostart --reset --as ${appName} --stack cflinuxfs2"
			
	    // Download and install AppDynamics Agent
        Greenfield.appdynamics_config("${appName}")
        
        // Start Application after all the configs are setup
        Greenfield.stackato "start ${appName}"

		// Create an application route to support a cloud to cloud service test that uses a present - or not present User Provided Service
		Greenfield.stackato "map ${appName} ${appName}-db.cf.dv.tvlport.com"
		
		// Create an application route to support F5 Access
		Greenfield.stackato "map ${appName} ${appName}.cf.dv.tvlport.com"

		// Create an application route to support F5 Access
		Greenfield.stackato "map ${appName} ${appName}.cf.dv.tvlport.com"

	} finally {
	    Greenfield.stackato_logout()
    }
}
