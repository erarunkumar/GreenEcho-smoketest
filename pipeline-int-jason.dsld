node('InfraSvcOrg') {
    def mvnHome = tool 'Maven_3_2_5'
    env.JAVA_HOME="${tool 'JDK_7u80'}"
    env.PATH="${env.JAVA_HOME}/bin:${mvnHome}/bin:${env.PATH}"
    env.MAVEN_OPTS="-Xmx2048m -XX:MaxPermSize=512m"
    
    stage 'Load Greenfield Functions'
    sh "git config --global http.sslVerify 'false'"
    def Greenfield = fileLoader.fromGit('GreenfieldPipeline/GreenfieldPipeline', 'https://gitbucket.tvlport.com/git/GREENFIELD/GreenfieldAdmin.git', 'master', null, '')

    stage 'List Production Regions'
		
    def Regions = Greenfield.getRegions()
    //println Regions.class
    for(myRegion in Regions){
        println "$myRegion.CLUSTER"
        println "http://$myRegion.CLUSTER"
        println "$myRegion.DOMAIN"
    }  

    stage 'Checkout'
    sh "git config --global http.sslVerify 'false'"
    Greenfield.git_checkout 'https://gitbucket.tvlport.com/git/GREENFIELD/GreenEcho.git' 


    stage 'Document Check'
    Greenfield.checkdocs 'https://doclibrary.travelport.com/dat/Data%20Center%20Operations/Cloud%20Implementations/Greenfield%20Echo/Green%20Echo%20Operational%20Support.docx'
    
    stage 'Maven Build'
    //wrap([$class: 'ConfigFileBuildWrapper', managedFiles: [[fileId: 'maven-settings', targetLocation: 'settings.xml', variable: 'GreenFieldSettings' ]]]) {
    wrap([$class: 'ConfigFileBuildWrapper', managedFiles: [[fileId: 'org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig1448996998298', targetLocation: 'settings.xml', variable: '']]]) {
/*        stage 'Compile UnitTest'
	    	// Complete a clean compile and unit test of my application
        	sh "mvn -s settings.xml clean compile test"

        stage 'Nexus Jar Publish'
			// Push a Jar file of my application to Nexus
       		sh "mvn -s settings.xml -Pjarmaker deploy -DskipTests"

        stage 'Nexus War Publish'
			// Push a War file of my application to Nexus
        	sh "mvn -s settings.xml -Pwebapp deploy -DskipTests"
        */
		env.JAVA_HOME="${tool 'JDK_7u80'}"
		stage 'Compile UnitTest'
			// Complete a clean compile and unit test of my application
			sh "mvn -s settings.xml clean compile test"
		
        stage 'Sonar_1.7'
           sh "mvn -s settings.xml -Psonar-jdk7 clean compile sonar:sonar"
        
		env.JAVA_HOME="${tool 'JDK_8u74'}"
		stage 'Compile UnitTest'
			// Complete a clean compile and unit test of my application
			sh "mvn -s settings.xml clean compile test"
		
	    stage 'Sonar_1.7'
		   sh "mvn -s settings.xml -Psonar-jdk8 clean compile sonar:sonar"
        

    }
	
   /* stage 'Integration Deployment'
	Greenfield.stackato_login "https://api.stackato.tvlport.com","InfraSvcOrg", "NonProd"
	try {
		//Define the Application Name
		def appName = "greenecho-jason2"
		
		// Allow Access to App Dynamics for Application
		Greenfield.appdynamics_setup("${appName}", "DV")
	    
		// Allow Access to Config Repo for Zookeeper
		Greenfield.config_repo_nonprod_setup()
		
		// Green Echo Application - Allow Access to Proxy Servers
		Greenfield.dvproxy_setup()
	
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason1 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:1 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason2 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:2 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason3 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:3 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason4 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:4 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason5 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:5 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason6 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:6 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason7 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:7 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason8 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:8 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason9 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:9 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason10 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:10 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason11 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:11 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason12 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:12 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason13 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:13 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason14 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:14 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason15 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:15 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason16 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:16 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason17 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:17 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason18 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:18 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason19 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:19 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason20 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:20 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason21 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:21 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason22 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:22 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason23 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:23 --credentials password:''"
		// Create an application User Provided Service to support holding my application configurations via VCAPs (until Zookeeper support this feature)
		Greenfield.stackato "create-service user-provided jason24 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:24 --credentials password:''"
		Greenfield.stackato "create-service user-provided jason25 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:25 --credentials password:''"
		Greenfield.stackato "create-service user-provided jason26 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:26 --credentials password:''"
		Greenfield.stackato "create-service user-provided jason27 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:27 --credentials password:''"
		Greenfield.stackato "create-service user-provided jason28 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:28 --credentials password:''"
		Greenfield.stackato "create-service user-provided jason29 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:29 --credentials password:''"
		Greenfield.stackato "create-service user-provided jason30 --credentials hostname:10.1.1.12 --credentials host:10.1.1.12 --credentials port:30 --credentials password:''"
		
		// Push my Application as an "integration" instance
        Greenfield.stackato "push -n --manifest manifest-jason.yml --nostart --reset --as ${appName}"
			
		Greenfield.stackato "bind-service jason1 ${appName}"
		Greenfield.stackato "bind-service jason2 ${appName}"
		Greenfield.stackato "bind-service jason3 ${appName}"
		Greenfield.stackato "bind-service jason4 ${appName}"
		Greenfield.stackato "bind-service jason5 ${appName}"
		Greenfield.stackato "bind-service jason6 ${appName}"
		Greenfield.stackato "bind-service jason7 ${appName}"
		Greenfield.stackato "bind-service jason8 ${appName}"
		Greenfield.stackato "bind-service jason9 ${appName}"
		Greenfield.stackato "bind-service jason10 ${appName}"
		Greenfield.stackato "bind-service jason11 ${appName}"
		Greenfield.stackato "bind-service jason12 ${appName}"
		Greenfield.stackato "bind-service jason13 ${appName}"
		Greenfield.stackato "bind-service jason14 ${appName}"
		Greenfield.stackato "bind-service jason15 ${appName}"
		Greenfield.stackato "bind-service jason16 ${appName}"
		Greenfield.stackato "bind-service jason17 ${appName}"
		Greenfield.stackato "bind-service jason18 ${appName}"
		Greenfield.stackato "bind-service jason19 ${appName}"
		Greenfield.stackato "bind-service jason20 ${appName}"
		Greenfield.stackato "bind-service jason21 ${appName}"
		Greenfield.stackato "bind-service jason22 ${appName}"
		Greenfield.stackato "bind-service jason23 ${appName}"
		Greenfield.stackato "bind-service jason24 ${appName}"
		Greenfield.stackato "bind-service jason25 ${appName}"
		Greenfield.stackato "bind-service jason26 ${appName}"
		Greenfield.stackato "bind-service jason27 ${appName}"
		Greenfield.stackato "bind-service jason28 ${appName}"
		Greenfield.stackato "bind-service jason29 ${appName}"
		Greenfield.stackato "bind-service jason30 ${appName}"
		
	    // Download and install AppDynamics Agent
        Greenfield.appdynamics_config("${appName}")
        
        // Start Application after all the configs are setup
        Greenfield.stackato "start ${appName}"

		// Create an application route to support a cloud to cloud service test that uses a present - or not present User Provided Service
		Greenfield.stackato "map ${appName} ${appName}-db.cf.dv.tvlport.com"
		
		// Create an application route to support F5 Access
		Greenfield.stackato "map ${appName} ${appName}.cf.dv.tvlport.com"

		// Create an application route to support F5 Access
		Greenfield.stackato "map ${appName} ${appName}.cf.dv.tvlport.com"

	} finally {
	    Greenfield.stackato_logout()
    }*/
}
